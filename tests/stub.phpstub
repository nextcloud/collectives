<?php

declare(strict_types=1);
// SPDX-FileCopyrightText: 2021 Robin Appelman <robin@icewind.nl>
// SPDX-FileCopyrightText: 2022 Carl Schwan <carl@carlschwan.eu>
// SPDX-FileCopyrightText: 2022 Jonas <jonas@freesources.org>
// SPDX-License-Identifier: AGPL-3.0-or-later

namespace {
    use OCP\IServerContainer;

    class OC {
        static $CLI = false;
        /** @var string */
        static $WEBROOT;
        /** @var IServerContainer */
        static $server;
    }
}

namespace OC\Files\Node {
    use OCP\Files\FileInfo;
    abstract class Node implements \OCP\Files\Node {
		/** @return FileInfo|\ArrayAccess */
		public function getFileInfo() {}

        /** @return \OCP\Files\Mount\IMountPoint */
        public function getMountPoint() {}
    }
}

namespace OC\Hooks {
    class Emitter {
        public function emit(string $class, string $value, array $option) {}
        /** Closure $closure */
        public function listen(string $class, string $value, $closure) {}
    }
    class BasicEmitter extends Emitter {
    }
}

namespace OC\Cache {
	/**
	 * @template T
	 */
	class CappedMemoryCache implements \ArrayAccess {
		/** @return ?T */
		public function get($key) {}
		/** @param T $value */
		public function set($key, $value, $ttl = '') {}
		#[\ReturnTypeWillChange]
		public function &offsetGet($offset) { }
		public function offsetSet($offset, $value): void { }
		public function offsetUnset($offset): void { }
	}
}

namespace OC\Core\Command {
    use Symfony\Component\Console\Input\InputInterface;
    use Symfony\Component\Console\Output\OutputInterface;
    class Base {
        public const OUTPUT_FORMAT_PLAIN = 'plain';
        public const OUTPUT_FORMAT_JSON = 'json';
        public const OUTPUT_FORMAT_JSON_PRETTY = 'json_pretty';

        public function __construct() {}
        protected function configure() {}
        public function run(InputInterface $input, OutputInterface $output) {}
        public function setName(string $name) {}
        public function getHelper(string $name) {}
        protected function writeArrayInOutputFormat(InputInterface $input, OutputInterface $output, $items, $prefix = '  - ') {
        }
    }
}

namespace OC\Files\ObjectStore {
    class NoopScanner {}
}

namespace Symfony\Component\Console\Helper {
	use Symfony\Component\Console\Output\OutputInterface;
	class Table {
		public function __construct(OutputInterface $text) {}
		public function setHeaders(array $header) {}
		public function setRows(array $rows) {}
		public function render() {}
	}
}

namespace Symfony\Component\Console\Input {
	class InputInterface {
		public function getOption(string $key) {}
		public function setOption(string $key, $value) {}
		public function getArgument(string $key) {}
	}
	class InputArgument {
		const REQUIRED = 0;
		const OPTIONAL = 1;
		const IS_ARRAY = 1;
	}
	class InputOption {
		const VALUE_NONE = 1;
		const VALUE_REQUIRED = 1;
		const VALUE_OPTIONAL = 1;
	}
}

namespace Symfony\Component\Console\Question {
	class ConfirmationQuestion {
		public function __construct(string $text, bool $default) {}
	}
}

namespace Symfony\Component\Console\Output {
    class OutputInterface {
        public const VERBOSITY_VERBOSE = 1;
        public function writeln(string $text, int $flat = 0) {}
        public function write($messages, $newline = false, $options = 0) {}
    }
}

namespace OC\Collaboration\Reference {
    use OCP\Collaboration\Reference\IReferenceManager;

    class LinkReferenceProvider {
        public function resolveReference(string $referenceText) {}
    }

    class ReferenceManager implements IReferenceManager {
        public function invalidateCache(string $cachePrefix, ?string $cacheKey = null): void;
    }
}

namespace OC\Files\Cache {
    use OCP\Files\Cache\ICache;
    use OCP\Files\Cache\ICacheEntry;
    use OCP\Files\Search\ISearchQuery;
	use OCP\Files\Search\ISearchOperator;
	use OCP\Files\Search\ISearchQuery;
    use OCP\Files\IMimeTypeLoader;

    class Cache implements ICache {
        /**
         * @param \OCP\Files\Cache\ICache $cache
         */
        public function __construct($cache) {
            $this->cache = $cache;
        }
        public function getNumericStorageId() { }
        public function get() { }
        public function getIncomplete() {}
        public function getPathById($id) {}
        public function getAll() {}
        public function get($file) {}
        public function getFolderContents($folder) {}
        public function getFolderContentsById($fileId) {}
        public function put($file, array $data) {}
        public function insert($file, array $data) {}
        public function update($id, array $data) {}
        public function getId($file) {}
        public function getParentId($file) {}
        public function inCache($file) {}
        public function remove($file) {}
        public function move($source, $target) {}
        public function moveFromCache(ICache $sourceCache, $sourcePath, $targetPath) {}
        public function clear() {}
        public function getStatus($file) {}
        public function search($pattern) {}
        public function searchByMime($mimetype) {}
        public function searchQuery(ISearchQuery $query) {}
        public function correctFolderSize($path, $data = null, $isBackgroundScan = false) {}
        public function copyFromCache(ICache $sourceCache, ICacheEntry $sourceEntry, string $targetPath): int {}
        public function normalize($path) {}
        public function getQueryFilterForStorage(): ISearchOperator {}
        public function getCacheEntryFromSearchResult(ICacheEntry $rawEntry): ?ICacheEntry {}
        public static function cacheEntryFromData($data, IMimeTypeLoader $mimetypeLoader): ICacheEntry {}
    }
}

namespace OC\Files\Cache\Wrapper {
    use OC\Files\Cache\Cache;
    class CacheWrapper extends Cache {}
}

namespace OC\Files {
    use OCP\Files\Cache\ICacheEntry;
    use OCP\Files\Mount\IMountPoint;
    use OCP\IUser;

    class Filesystem {
        public static function addStorageWrapper(string $wrapperName, callable $wrapper, int $priority = 50) {
        }
    }

    class FileInfo implements \OCP\Files\FileInfo {
        /**
         * @param string|boolean $path
         * @param \OCP\Files\Storage\IStorage $storage
         * @param string $internalPath
         * @param array|ICacheEntry $data
         * @param \OCP\Files\Mount\IMountPoint $mount
         * @param \OCP\IUser|null $owner
         */
        public function __construct($path, $storage, $internalPath, $data, $mount, $owner = null) {}
    }
    class View {
        public function __construct(string $path) {}
        public function unlink($path) {}
		public function is_dir($path): bool {}
		public function mkdir($path) {}
		public function getRoot(): string {}
		public function getOwner(string $path): string {}
    }
}

namespace OC\User {
    use OCP\EventDispatcher\IEventDispatcher;
    use OCP\IUser;
    use OCP\UserInterface;
    class User implements IUser {
        public function __construct(string $uid, ?UserInterface $backend, IEventDispatcher $dispatcher, $emitter = null, IConfig $config = null, $urlGenerator = null) {}
    }
}

namespace OCA\DAV\Upload {

	use Sabre\DAV\File;

	abstract class FutureFile extends File {}
}

namespace OCA\DAV\Connector\Sabre {

	class Node {
		public function getFileInfo(): \OCP\Files\FileInfo {}
	}

	class PublicAuth {
		public const DAV_AUTHENTICATED = 'public_link_authenticated';
	}
}

namespace OC\BackgroundJob {

    use OCP\BackgroundJob\IJob;
    use OCP\BackgroundJob\IJobList;
    use OCP\ILogger;

    abstract class TimedJob implements IJob {
        public function execute(IJobList $jobList, ILogger $logger = null) {
        }

        abstract protected function run($argument);

        public function setId(int $id) {
        }

        public function setLastRun(int $lastRun) {
        }

        public function setArgument($argument) {
        }

        public function getId() {
        }

        public function getLastRun() {
        }

        public function getArgument() {
        }
    }
}

namespace OC\Files\Mount {
    use OC\Files\Filesystem;
    use OC\Files\Storage\Storage;
    use OC\Files\Storage\StorageFactory;
    use OCP\Files\Mount\IMountPoint;

    class MountPoint implements IMountPoint {
        /**
         * @var \OC\Files\Storage\Storage $storage
         */
        protected $storage = null;
        protected $class;
        protected $storageId;
        protected $rootId = null;

        /** @var int|null */
        protected $mountId;

        /**
         * @param string|\OCP\Files\Storage\IStorage $storage
         * @param string $mountpoint
         * @param array $arguments (optional) configuration for the storage backend
         * @param \OCP\Files\Storage\IStorageFactory $loader
         * @param array $mountOptions mount specific options
         * @param int|null $mountId
         * @throws \Exception
         */
        public function __construct($storage, $mountpoint, $arguments = null, $loader = null, $mountOptions = null, $mountId = null) {
            throw new \Exception('stub');
        }

        /**
         * get complete path to the mount point, relative to data/
         *
         * @return string
         */
        public function getMountPoint() {
            throw new \Exception('stub');
        }

        /**
         * Sets the mount point path, relative to data/
         *
         * @param string $mountPoint new mount point
         */
        public function setMountPoint($mountPoint) {
            throw new \Exception('stub');
        }

        /**
         * @return \OCP\Files\Storage\IStorage
         */
        public function getStorage() {
            throw new \Exception('stub');
        }

        /**
         * @return string
         */
        public function getStorageId() {
            throw new \Exception('stub');
        }

        /**
         * @return int
         */
        public function getNumericStorageId() {
            throw new \Exception('stub');
        }

        /**
         * @param string $path
         * @return string
         */
        public function getInternalPath($path) {
            throw new \Exception('stub');
        }

        /**
         * @param callable $wrapper
         */
        public function wrapStorage($wrapper) {
            throw new \Exception('stub');
        }

        /**
         * Get a mount option
         *
         * @param string $name Name of the mount option to get
         * @param mixed $default Default value for the mount option
         * @return mixed
         */
        public function getOption($name, $default) {
            throw new \Exception('stub');
        }

        /**
         * Get all options for the mount
         *
         * @return array
         */
        public function getOptions() {
            throw new \Exception('stub');
        }

        /**
         * @return int
         */
        public function getStorageRootId() {
            throw new \Exception('stub');
        }

        public function getMountId() {
            throw new \Exception('stub');
        }

        public function getMountType() {
            throw new \Exception('stub');
        }

        public function getMountProvider(): string {
            throw new \Exception('stub');
        }
    }
}

namespace OC\Files\Storage\Wrapper{

    use OCP\Files\Cache\ICache;
    use OCP\Files\Cache\ICacheEntry;
    use OCP\Files\Search\ISearchQuery;
    use OCP\Files\Storage\IStorage;

    class Wrapper implements IStorage {
        public function __construct(array $parameters) {
        }

        public function getWrapperStorage(): ?IStorage {}

        public function getId() {}

        public function mkdir($path) {}

        public function rmdir($path) {}

        public function opendir($path) {
            throw new \Exception('stub');
        }

        public function is_dir($path) {
            throw new \Exception('stub');
        }

        public function is_file($path) {
            throw new \Exception('stub');
        }

        public function stat($path) {
            throw new \Exception('stub');
        }

        public function filetype($path) {
            throw new \Exception('stub');
        }

        public function filesize($path) {
            throw new \Exception('stub');
        }

        public function isCreatable($path) {
            throw new \Exception('stub');
        }

        public function isReadable($path) {
            throw new \Exception('stub');
        }

        public function isUpdatable($path) {
            throw new \Exception('stub');
        }

        public function isDeletable($path) {
            throw new \Exception('stub');
        }

        public function isSharable($path) {
            throw new \Exception('stub');
        }

        public function getPermissions($path) {
            throw new \Exception('stub');
        }

        public function file_exists($path) {
            throw new \Exception('stub');
        }

        public function filemtime($path) {
            throw new \Exception('stub');
        }

        public function file_get_contents($path) {
            throw new \Exception('stub');
        }

        public function file_put_contents($path, $data) {
            throw new \Exception('stub');
        }

        public function unlink($path) {
            throw new \Exception('stub');
        }

        public function rename($path1, $path2) {
            throw new \Exception('stub');
        }

        public function copy($path1, $path2) {
            throw new \Exception('stub');
        }

        public function fopen($path, $mode) {
            throw new \Exception('stub');
        }

        public function getMimeType($path) {
            throw new \Exception('stub');
        }

        public function hash($type, $path, $raw = false) {
            throw new \Exception('stub');
        }

        public function free_space($path) {
            throw new \Exception('stub');
        }

        public function touch($path, $mtime = null) {
            throw new \Exception('stub');
        }

        public function getLocalFile($path) {
            throw new \Exception('stub');
        }

        public function hasUpdated($path, $time) {
            throw new \Exception('stub');
        }

        public function getETag($path) {
            throw new \Exception('stub');
        }

        public function isLocal() {
            throw new \Exception('stub');
        }

        public function instanceOfStorage($class) {
            throw new \Exception('stub');
        }

        public function getDirectDownload($path) {
            throw new \Exception('stub');
        }

        public function verifyPath($path, $fileName) {
            throw new \Exception('stub');
        }

        public function copyFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
            throw new \Exception('stub');
        }

        public function moveFromStorage(IStorage $sourceStorage, $sourceInternalPath, $targetInternalPath) {
            throw new \Exception('stub');
        }

        public function test() {
            throw new \Exception('stub');
        }

        public function getAvailability() {
            throw new \Exception('stub');
        }

        public function setAvailability($isAvailable) {
            throw new \Exception('stub');
        }

        public function getOwner($path) {
            throw new \Exception('stub');
        }

        public function getCache() {
            throw new \Exception('stub');
        }

        public function getPropagator() {
            throw new \Exception('stub');
        }

        public function getScanner() {
            throw new \Exception('stub');
        }

        public function getUpdater() {
            throw new \Exception('stub');
        }

        public function getWatcher() {
            throw new \Exception('stub');
        }
    }

    class Jail extends Wrapper {
        public function getUnjailedPath(string $path): string {}
    }

    class Quota extends Wrapper {
        public function getQuota() {}
    }

    class PermissionsMask extends Wrapper {
        public function getQuota() {}
    }
}

namespace OCA\Viewer\Event {
	class LoadViewer extends \OCP\EventDispatcher\Event {}
}

namespace OCA\Circles\Model {
    class Member {
        public const LEVEL_NONE = 0;
        public const LEVEL_MEMBER = 1;
        public const LEVEL_MODERATOR = 4;
        public const LEVEL_ADMIN = 8;
        public const LEVEL_OWNER = 9;

        public const TYPE_SINGLE = 0;
        public const TYPE_USER = 1;
        public const TYPE_GROUP = 2;
        public const TYPE_MAIL = 4;
        public const TYPE_CONTACT = 8;
        public const TYPE_CIRCLE = 16;
        public const TYPE_APP = 10000;

        public const ALLOWING_ALL_TYPES = 31;

        public const APP_CIRCLES = 10001;
        public const APP_OCC = 10002;
        public const APP_DEFAULT = 11000;

        public function getSingleId(): string {}
        public function getUserType(): int {}
        public function getLevel(): int {}
    }

    class Circle {
        public function getName(): string {}
        public function getSingleId(): string {}
        public function getSanitizedName(): string {}
        public function getMembers(): array {}
        public function getInitiator(): Member {}
    }

    class FederatedUser {
    }
}

namespace OCA\Circles\Model\Probes {
	class CircleProbe {
		public function mustBeMember(bool $must = true): self {}
	}
}

namespace OCA\Circles\Events {
	use OCP\EventDispatcher\Event;
	use OCA\Circles\Model\Federated\FederatedEvent;
	use OCA\Circles\Model\Circle;
	abstract class CircleResultGenericEvent extends Event {
		public function getCircle(): Circle;
	}
	abstract class CircleDestroyedEvent extends CircleResultGenericEvent {
		public function __construct(FederatedEvent $federatedEvent, array $results) {}
	}
}

namespace OCA\Circles\Exceptions {
	use JsonSerializable;
	class CircleNotFoundException extends FederatedItemNotFoundException {}
	class FederatedItemException extends \Exception implements JsonSerializable {}
	class FederatedItemNotFoundException extends FederatedItemException {}
	class FederatedItemServerException extends FederatedItemException {}
	class FederatedItemUnauthorizedException extends FederatedItemException {}
	class FederatedUserException extends FederatedItemServerException {}
	class FederatedUserNotFoundException extends FederatedItemNotFoundException {}
	class InitiatorNotFoundException extends FederatedItemUnauthorizedException {}
	class InvalidIdException extends FederatedItemServerException {}
	class RequestBuilderException extends \Exception {}
	class SingleCircleNotFoundException extends FederatedItemServerException {}
}

namespace OCA\Circles\Tools\Exceptions {
	use Exception;
	class InvalidItemException extends Exception {}
}

namespace OCA\Circles {
    use OCA\Circles\Model\Circle;
    use OCA\Circles\Model\FederatedUser;
    use OCA\Circles\Model\Probes\CircleProbe;
    class CirclesManager {
        public function startSuperSession(): void {}
        public function startSession(?FederatedUser $federatedUser = null): void {}
        public function getCircles(?CircleProbe $probe = null): array {}
        public function getCircle(string $singleId, ?CircleProbe $probe = null): Circle {}
        public function flagAsAppManaged(string $circleId, bool $enabled = true): void {}
        public function getFederatedUser(string $federatedId, int $type = Member::TYPE_SINGLE): FederatedUser {}
        public function stopSession(): void {}
		public function createCircle(string $name, ?FederatedUser $owner = null, bool $personal = false, bool $local = false): Circle {}
        public function destroyCircle(string $singleId): void {}
    }
}

namespace OCA\Files_Versions\Versions {
    use OCP\Files\File;
    use OCP\Files\FileInfo;
    use OCP\Files\NotFoundException;
    use OCP\Files\Storage\IStorage;
    use OCP\IUser;

    interface IVersionBackend {
        public function useBackendForStorage(IStorage $storage): bool;

        /**
         * @return IVersion[]
         */
        public function getVersionsForFile(IUser $user, FileInfo $file): array;

        public function createVersion(IUser $user, FileInfo $file);

        public function rollback(IVersion $version);

        /**
         * @return resource|false
         * @throws NotFoundException
         */
        public function read(IVersion $version);

        /**
         * @param int|string $revision
         */
        public function getVersionFile(IUser $user, FileInfo $sourceFile, $revision): ?File;
    }

    interface IVersion {
        public function getBackend(): IVersionBackend;

        public function getSourceFile(): FileInfo;

        /**
         * @return int|string
         */
        public function getRevisionId();

        public function getTimestamp(): int;

        public function getSize(): int;

        public function getSourceFileName(): string;

        public function getMimeType(): string;

        public function getVersionPath(): string;

        public function getUser(): IUser;
    }

    class Version implements IVersion {
        public function __construct(
            int $timestamp,
            $revisionId,
            string $name,
            int $size,
            string $mimetype,
            string $path,
            FileInfo $sourceFileInfo,
            IVersionBackend $backend,
            IUser $user
        ) {
        }

        public function getBackend(): IVersionBackend {
            throw new \Exception('stub');
        }

        public function getSourceFile(): FileInfo {
            throw new \Exception('stub');
        }

        public function getRevisionId() {
            throw new \Exception('stub');
        }

        public function getTimestamp(): int {
            throw new \Exception('stub');
        }

        public function getSize(): int {
            throw new \Exception('stub');
        }

        public function getSourceFileName(): string {
            throw new \Exception('stub');
        }

        public function getMimeType(): string {
            throw new \Exception('stub');
        }

        public function getVersionPath(): string {
            throw new \Exception('stub');
        }

        public function getUser(): IUser {
            throw new \Exception('stub');
        }
    }
}

namespace OCA\Files_Versions {
    class Expiration {
        public function shouldAutoExpire() { }

        /**
         * @param int $timestamp
         * @param bool $quotaExceeded
         * @return bool
         */
        public function isExpired($timestamp, $quotaExceeded = false) {}
    }
}

namespace OCA\Files_Trashbin {
    class Expiration {
        /**
         * @param int $timestamp
         * @param bool $quotaExceeded
         * @return bool
         */
        public function isExpired($timestamp, $quotaExceeded = false) {}
    }
}

namespace OCA\Files_Trashbin\Trash {
	interface ITrashBackend {}

	use OCP\Files\FileInfo;
	interface ITrashItem extends FileInfo {
	}

	use OCP\IUser;
	class TrashItem implements ITrashItem {
		public function getOriginalLocation(): string {}
		public function getDeletedTime(): int {}
		public function getTrashPath(): string {}
		public function getTrashPath(): string {}
		public function getUser(): IUser {}
		public function getEtag() {}
		public function getSize($includeMounts = true) {}
		public function getMtime() {}
		public function getName() {}
		public function getInternalPath() {}
		public function getPath() {}
		public function getMimetype() {}
		public function getMimePart() {}
		public function getStorage() {}
		public function getId() {}
		public function isEncrypted() {}
		public function getPermissions() {}
		public function getType() {}
		public function isReadable() {}
		public function isUpdateable() {}
		public function isCreatable() {}
		public function isDeletable() {}
		public function isShareable() {}
		public function isShared() {}
		public function isMounted() {}
		public function getMountPoint() {}
		public function getOwner() {}
		public function getChecksum() {}
		public function getExtension(): string {}
		public function getTitle(): string {}
		public function getCreationTime(): int {}
		public function getUploadTime(): int {}
	}
}

namespace OCP\Files\Mount {
	interface ISystemMountPoint {}
}

namespace OCA\Text\Event {
	class LoadEditor extends \OCP\EventDispatcher\Event {}
}
