<?php

declare(strict_types=1);

/**
 * SPDX-FileCopyrightText: 2024 Nextcloud GmbH and Nextcloud contributors
 * SPDX-License-Identifier: AGPL-3.0-or-later
 */

namespace Unit\Search;

use OC\Collaboration\Reference\LinkReferenceProvider;
use OC\Collaboration\Reference\ReferenceManager;
use OCA\Collectives\Reference\SearchablePageReferenceProvider;
use OCA\Collectives\Service\CollectiveService;
use OCA\Collectives\Service\PageService;
use OCA\Collectives\Service\SharePageService;
use OCP\Collaboration\Reference\IPublicReferenceProvider;
use OCP\IDateTimeFormatter;
use OCP\IL10N;
use OCP\IURLGenerator;
use PHPUnit\Framework\TestCase;

class SearchablePageReferenceProviderTest extends TestCase {
	private SearchablePageReferenceProvider $provider;
	protected function setUp(): void {
		$this->needsIPublicReferenceProvider();
		parent::setUp(); // TODO: Change the autogenerated stub
		$collectiveService = $this->createMock(CollectiveService::class);
		$pageService = $this->createMock(PageService::class);
		$sharePageService = $this->createMock(SharePageService::class);
		$l10n = $this->createMock(IL10N::class);
		$urlGenerator = $this->createMock(IURLGenerator::class);
		$urlGenerator->method('getAbsoluteURL')->willReturnMap([
			['/apps/collectives/p', 'https://nextcloud.local/apps/collectives/p'],
			['/index.php/apps/collectives/p', 'https://nextcloud.local/index.php/apps/collectives/p'],
			['/apps/collectives', 'https://nextcloud.local/apps/collectives'],
			['/index.php/apps/collectives', 'https://nextcloud.local/index.php/apps/collectives'],
		]);
		$dateTimeFormatter = $this->createMock(IDateTimeFormatter::class);
		$referenceManager = $this->createMock(ReferenceManager::class);
		$linkReferenceProvider = $this->createMock(LinkReferenceProvider::class);
		$uid = 'jane';
		$this->provider = new SearchablePageReferenceProvider(
			$collectiveService,
			$pageService,
			$sharePageService,
			$l10n,
			$urlGenerator,
			$dateTimeFormatter,
			$referenceManager,
			$linkReferenceProvider,
			$uid,
		);
	}

	private function needsIPublicReferenceProvider(): void {
		if (!interface_exists(IPublicReferenceProvider::class)) {
			$this->markTestSkipped('IPublicReferenceProvider not available.');
		}
	}

	private function urlProvider(): array {
		return [
			// internal
			// ['https://nextcloud.local/apps/collectives/supacollective', ''],
			['https://nextcloud.local/apps/collectives/supacollective/Tutos/Hacking/Spectre', 'Tutos/Hacking/Spectre'],
			['https://nextcloud.local/apps/collectives/supacollective/Tutos/Hacking/Spectre', 'Tutos/Hacking/Spectre'],
			['https://nextcloud.local/index.php/apps/collectives/supacollective/Tutos/Hacking/Spectre', 'Tutos/Hacking/Spectre'],

			// public
			// ['https://nextcloud.local/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective', ''],
			['https://nextcloud.local/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective/abc', 'abc'],
			['https://nextcloud.local/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective/Tutos/Hacking/Spectre', 'Tutos/Hacking/Spectre'],
			['https://nextcloud.local/index.php/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective/Tutos/Hacking/Spectre', 'Tutos/Hacking/Spectre'],
		];
	}

	private function urlFileIdProvider(): array {
		return [
			// internal
			['https://nextcloud.local/apps/collectives/supacollective/Tutos/Hacking/Spectre?fileId=14457', 'Tutos/Hacking/Spectre'],
			['https://nextcloud.local/index.php/apps/collectives/supacollective/Tutos/Hacking/Spectre?fileId=14457', 'Tutos/Hacking/Spectre'],

			// public
			['https://nextcloud.local/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective/Tutos/Hacking/Spectre?fileId=14457', 'Tutos/Hacking/Spectre'],
			['https://nextcloud.local/index.php/apps/collectives/p/MsdwSCmP9F6jcQX/supacollective/Tutos/Hacking/Spectre?fileId=14457', 'Tutos/Hacking/Spectre'],
		];
	}

	private function nonMatchingUrlProvider(): array {
		return [
			['https://nextcloud.local/apps/contacts/All%20contacts/abc'],
			['https://nextcloud.local/index.php/apps/contacts/All%20contacts/abc'],
			['https://nextcloud.local/apps/collectives/'],
		];
	}

	/**
	 * @dataProvider urlProvider
	 */
	public function testMatchUrlInternal(string $url, string $pagePath): void {
		$expectedPagePath = [
			'collectiveName' => 'supacollective',
			'pagePath' => $pagePath,
		];

		self::assertEquals($expectedPagePath, $this->provider->matchUrl($url));
	}

	/**
	 * @dataProvider urlFileIdProvider
	 */
	public function testMatchUrlInternalFileId(string $url, string $pagePath): void {
		$expectedPagePath = [
			'collectiveName' => 'supacollective',
			'pagePath' => $pagePath,
			'fileId' => '14457',
		];

		self::assertEquals($expectedPagePath, $this->provider->matchUrl($url));
	}

	/**
	 * @dataProvider nonMatchingUrlProvider
	 */
	public function testMatchUrlNonMatching(string $url): void {
		self::assertEquals(null, $this->provider->matchUrl($url));
	}
}
